# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://flask-app-<<parameters.workflow_id>>
            aws s3 rb s3://flask-app-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name "flask-app-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "flask-app-frontend-<<parameters.workflow_id>>"

  install_awscli:
    description: Install awscli
    steps:
      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install ansible -y
  
  install_eksctl:
    description: Install eksctl
    steps:
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

  install_kubectl:
    description: install kubectl command line tool
    steps:
      - run:
          name: get kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

jobs:
  lint:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-docker:
    environment:
      IMAGE_NAME: kynkyn/flask_app_img
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            cd services
            docker --version
            # Build image and add a descriptive tag
            docker build -t flask_app_img:latest .
            # List docker images
            docker images
            echo "====> push image to docker hub"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASS"
            docker push kynkyn/flask_app_img:latest

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=flask-app \
              --stack-name "flask-app-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: deploy flask front end infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=flask-app \
              --stack-name "flask-app-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: deploy back-end ip to ansible inventory
      #     command: |
      #       # Your code here
      #       cd .circleci/ansible
      #       cat inventory.txt
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text --filter Name=tag:Name,Values=flask-app-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
      #       cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install deps
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Get flask app backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=flask-app-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            echo "=========> BACKEND_IP IS:"
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:8000"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:8000" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz build
            aws s3 cp build s3://flask-app-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with MY fingerprint
      # - add_ssh_keys:
      #     fingerprints: ["68:b6:9a:55:7a:f2:30:47:60:e4:8b:c4:b5:59:e7:63"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_eksctl
      - install_kubectl
      - run:
          name: Deploy backend
          command: |
            # cd .circleci/ansible
            echo "------- Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id and remove
          command: |
            # your code here
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            echo '------------------'
            export BACKENDSTACKS=($(aws cloudformation describe-stacks --no-paginate --query 'Stacks[?StackName!=`null`]|[?contains(StackName, `flask-app-backend`) == `true`].StackName' --output text))
            echo List backend stacks: "${BACKENDSTACKS[@]}"
            echo '--------------------'
            for BACKENDSTACK in "${BACKENDSTACKS[@]}"
            do
              OldWorkflowID=${BACKENDSTACK: -7}
              echo '--------------------'
              echo handling cleanup workflowID: "${OldWorkflowID}"
              if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                echo removing resources of OldWorkflowID: "${OldWorkflowID}"
                # aws s3 rm --recursive s3://flask-app-${OldWorkflowID}
                # aws s3 rb --force s3://flask-app-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name flask-app-backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name flask-app-frontend-${OldWorkflowID}
                echo done removing
              else
                echo '------------------ this is the current workflow -----------------'
              fi
              echo '--------------------'
            done

workflows:
  default:
    jobs:
      # - lint
      # - load-test
      # - build-docker:
      #     requires: [lint]
      # - push-docker:
      #     requires: [build-docker]
      # - build-docker
      # - deploy-infrastructure
      # - deploy-frontend:
      #     requires: [deploy-infrastructure]
      # - deploy-backend:
      #     requires: [deploy-infrastructure]
      # - cleanup
      